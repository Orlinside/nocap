// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  admin
  user
}

enum ReactionType {
  LIKE
  FIRE
  THUMBS_UP
}

enum ImportanceComment {
  LOW
  MEDIUM
  HIGH
}

model User {
  id                     String                 @id @default(cuid())
  email                  String?                @unique
  emailVerified          DateTime?
  image                  String?
  name                   String?                @unique
  password               String?
  isNewsletterSubscribed Boolean                @default(false)
  role                   Role                   @default(user)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @default(now())
  accounts               Account[]
  photos                 Photo[]                // Relation avec Photo
  reactions              Reaction[]             // Relation avec Reaction
  comments               Comment[]              // Relation avec Comment

  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Party {
  id            String         @id @default(cuid())
  name          String
  startDateTime DateTime       @default(now())
  endDateTime   DateTime       @default(now())
  createdAt     DateTime       @default(now())
  photos        Photo[]        // Relation avec Photo
}

model Photo {
  id        String     @id @default(cuid())
  url       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  reactions Reaction[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

 partyId   String?  // Champ optionnel
 party     Party?   @relation(fields: [partyId], references: [id])
}

model Reaction {
  id        String     @id @default(cuid())
  type      ReactionType
  photo     Photo      @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId   String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime   @default(now())
}

model Comment {
  id            String            @id @default(cuid())
  content       String
  createdAt     DateTime          @default(now())
  user          User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?           
  isValid       Boolean           @default(false)
  importance    ImportanceComment @default(LOW)
}
